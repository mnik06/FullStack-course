/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/api/health": {
    get: {
      responses: {
        /** @description Default Response */
        200: {
          content: never;
        };
      };
    };
  };
  "/api/admin/users/": {
    get: {
      parameters: {
        query?: {
          offset?: number;
          limit?: number;
          search?: string;
        };
      };
      responses: {
        /** @description Default Response */
        200: {
          content: {
            "application/json": {
              data: ({
                  subId: string;
                  email: string;
                  isActive: boolean;
                  id: string;
                  name: string;
                  /** Format: date-time */
                  createdAt: string;
                  /** Format: date-time */
                  updatedAt: string;
                  /** @enum {string} */
                  role: "admin" | "user";
                })[];
              meta: {
                offset?: number;
                limit?: number;
                total?: number;
                totalPages?: number;
                page?: number;
              };
            };
          };
        };
      };
    };
  };
  "/api/admin/users/{userId}/disable-user/": {
    post: {
      parameters: {
        path: {
          userId: string;
        };
      };
      responses: {
        /** @description Default Response */
        200: {
          content: {
            "application/json": {
              success: boolean;
            };
          };
        };
      };
    };
  };
  "/api/admin/users/{userId}/enable-user/": {
    post: {
      parameters: {
        path: {
          userId: string;
        };
      };
      responses: {
        /** @description Default Response */
        200: {
          content: {
            "application/json": {
              success: boolean;
            };
          };
        };
      };
    };
  };
  "/api/auth/signup/": {
    post: {
      requestBody: {
        content: {
          "application/json": {
            /** Format: email */
            email: string;
            password: string;
            name: string;
          };
        };
      };
      responses: {
        /** @description Default Response */
        200: {
          content: never;
        };
      };
    };
  };
  "/api/posts/": {
    get: {
      parameters: {
        query?: {
          offset?: number;
          limit?: number;
          search?: string;
          sortBy?: "createdAt" | "title" | "commentsCount";
          sortOrder?: "asc" | "desc";
          numericFilters?: string[] | string;
        };
      };
      responses: {
        /** @description Default Response */
        200: {
          content: {
            "application/json": {
              data: ({
                  /** Format: uuid */
                  id: string;
                  title: string;
                  description?: string | null;
                  readingTime: number;
                  /** Format: date-time */
                  updatedAt: string;
                  /** Format: date-time */
                  createdAt: string;
                  /** Format: uuid */
                  userId: string;
                  user: {
                    subId: string;
                    email: string;
                    isActive?: boolean;
                    id: string;
                    name: string;
                    /** Format: date-time */
                    createdAt: string;
                    /** Format: date-time */
                    updatedAt: string;
                    /** @enum {string} */
                    role: "admin" | "user";
                  };
                  commentsCount: number;
                })[];
              meta: {
                offset?: number;
                limit?: number;
                total?: number;
                totalPages?: number;
                page?: number;
              };
            };
          };
        };
      };
    };
    post: {
      requestBody: {
        content: {
          "application/json": {
            title: string;
            description?: string | null;
          };
        };
      };
      responses: {
        /** @description Default Response */
        200: {
          content: {
            "application/json": {
              /** Format: uuid */
              id: string;
              title: string;
              description?: string | null;
              readingTime: number;
              /** Format: date-time */
              updatedAt: string;
              /** Format: date-time */
              createdAt: string;
              /** Format: uuid */
              userId: string;
              user: {
                subId: string;
                email: string;
                isActive?: boolean;
                id: string;
                name: string;
                /** Format: date-time */
                createdAt: string;
                /** Format: date-time */
                updatedAt: string;
                /** @enum {string} */
                role: "admin" | "user";
              };
              comments: ({
                  /** Format: uuid */
                  id: string;
                  text: string;
                  /** Format: date-time */
                  updatedAt: string;
                  /** Format: date-time */
                  createdAt: string;
                  /** Format: uuid */
                  postId: string;
                  /** Format: uuid */
                  userId: string;
                  user: {
                    subId: string;
                    email: string;
                    isActive?: boolean;
                    id: string;
                    name: string;
                    /** Format: date-time */
                    createdAt: string;
                    /** Format: date-time */
                    updatedAt: string;
                    /** @enum {string} */
                    role: "admin" | "user";
                  };
                })[];
            };
          };
        };
      };
    };
  };
  "/api/posts/{postId}/": {
    get: {
      parameters: {
        path: {
          postId: string;
        };
      };
      responses: {
        /** @description Default Response */
        200: {
          content: {
            "application/json": {
              /** Format: uuid */
              id: string;
              title: string;
              description?: string | null;
              readingTime: number;
              /** Format: date-time */
              updatedAt: string;
              /** Format: date-time */
              createdAt: string;
              /** Format: uuid */
              userId: string;
              user: {
                subId: string;
                email: string;
                isActive?: boolean;
                id: string;
                name: string;
                /** Format: date-time */
                createdAt: string;
                /** Format: date-time */
                updatedAt: string;
                /** @enum {string} */
                role: "admin" | "user";
              };
              comments: ({
                  /** Format: uuid */
                  id: string;
                  text: string;
                  /** Format: date-time */
                  updatedAt: string;
                  /** Format: date-time */
                  createdAt: string;
                  /** Format: uuid */
                  postId: string;
                  /** Format: uuid */
                  userId: string;
                  user: {
                    subId: string;
                    email: string;
                    isActive?: boolean;
                    id: string;
                    name: string;
                    /** Format: date-time */
                    createdAt: string;
                    /** Format: date-time */
                    updatedAt: string;
                    /** @enum {string} */
                    role: "admin" | "user";
                  };
                })[];
            };
          };
        };
      };
    };
    delete: {
      parameters: {
        path: {
          postId: string;
        };
      };
      responses: {
        /** @description Default Response */
        200: {
          content: {
            "application/json": {
              success: boolean;
            };
          };
        };
      };
    };
    patch: {
      parameters: {
        path: {
          postId: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": {
            title?: string;
            description?: string;
          };
        };
      };
      responses: {
        /** @description Default Response */
        200: {
          content: {
            "application/json": {
              /** Format: uuid */
              id: string;
              title: string;
              description?: string | null;
              readingTime: number;
              /** Format: date-time */
              updatedAt: string;
              /** Format: date-time */
              createdAt: string;
              /** Format: uuid */
              userId: string;
              user: {
                subId: string;
                email: string;
                isActive?: boolean;
                id: string;
                name: string;
                /** Format: date-time */
                createdAt: string;
                /** Format: date-time */
                updatedAt: string;
                /** @enum {string} */
                role: "admin" | "user";
              };
              comments: ({
                  /** Format: uuid */
                  id: string;
                  text: string;
                  /** Format: date-time */
                  updatedAt: string;
                  /** Format: date-time */
                  createdAt: string;
                  /** Format: uuid */
                  postId: string;
                  /** Format: uuid */
                  userId: string;
                  user: {
                    subId: string;
                    email: string;
                    isActive?: boolean;
                    id: string;
                    name: string;
                    /** Format: date-time */
                    createdAt: string;
                    /** Format: date-time */
                    updatedAt: string;
                    /** @enum {string} */
                    role: "admin" | "user";
                  };
                })[];
            };
          };
        };
      };
    };
  };
  "/api/posts/{postId}/comments/": {
    get: {
      parameters: {
        path: {
          postId: string;
        };
      };
      responses: {
        /** @description Default Response */
        200: {
          content: {
            "application/json": ({
                /** Format: uuid */
                id: string;
                text: string;
                /** Format: date-time */
                updatedAt: string;
                /** Format: date-time */
                createdAt: string;
                /** Format: uuid */
                postId: string;
                /** Format: uuid */
                userId: string;
                user: {
                  subId: string;
                  email: string;
                  isActive?: boolean;
                  id: string;
                  name: string;
                  /** Format: date-time */
                  createdAt: string;
                  /** Format: date-time */
                  updatedAt: string;
                  /** @enum {string} */
                  role: "admin" | "user";
                };
              })[];
          };
        };
      };
    };
    post: {
      parameters: {
        path: {
          postId: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            text: string;
          };
        };
      };
      responses: {
        /** @description Default Response */
        200: {
          content: {
            "application/json": {
              /** Format: uuid */
              id: string;
              text: string;
              /** Format: date-time */
              updatedAt: string;
              /** Format: date-time */
              createdAt: string;
              /** Format: uuid */
              postId: string;
              /** Format: uuid */
              userId: string;
              user: {
                subId: string;
                email: string;
                isActive?: boolean;
                id: string;
                name: string;
                /** Format: date-time */
                createdAt: string;
                /** Format: date-time */
                updatedAt: string;
                /** @enum {string} */
                role: "admin" | "user";
              };
            };
          };
        };
      };
    };
  };
  "/api/posts/{postId}/comments/{commentId}/": {
    delete: {
      parameters: {
        path: {
          postId: string;
          commentId: string;
        };
      };
      responses: {
        /** @description Default Response */
        200: {
          content: {
            "application/json": {
              success: boolean;
            };
          };
        };
      };
    };
    patch: {
      parameters: {
        path: {
          postId: string;
          commentId: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": {
            text?: string;
          };
        };
      };
      responses: {
        /** @description Default Response */
        200: {
          content: {
            "application/json": {
              /** Format: uuid */
              id: string;
              text: string;
              /** Format: date-time */
              updatedAt: string;
              /** Format: date-time */
              createdAt: string;
              /** Format: uuid */
              postId: string;
              /** Format: uuid */
              userId: string;
              user: {
                subId: string;
                email: string;
                isActive?: boolean;
                id: string;
                name: string;
                /** Format: date-time */
                createdAt: string;
                /** Format: date-time */
                updatedAt: string;
                /** @enum {string} */
                role: "admin" | "user";
              };
            };
          };
        };
      };
    };
  };
  "/api/user-profile/": {
    get: {
      responses: {
        /** @description Default Response */
        200: {
          content: {
            "application/json": {
              subId: string;
              email: string;
              isActive?: boolean;
              id: string;
              name: string;
              /** Format: date-time */
              createdAt: string;
              /** Format: date-time */
              updatedAt: string;
              /** @enum {string} */
              role: "admin" | "user";
            };
          };
        };
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /**
     * @description - GENERAL_ERROR -> 1000
     * - USER_ALREADY_EXISTS -> 1001
     * - PERMISSION_DENIED -> 1002
     * @enum {integer}
     */
    ErrorCodes: 1000 | 1001 | 1002;
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export type operations = Record<string, never>;
